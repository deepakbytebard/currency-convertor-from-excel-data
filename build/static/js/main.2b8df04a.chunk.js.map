{"version":3,"sources":["Components/IndividualData.js","Components/Data.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["IndividualData","individualExcelData","rates","base","noData","x","currentCurrency","Currency","val","convertedPrice","Amount","toFixed","baseData","slice","Name","className","Date","toDateString","convertTo","isNaN","isEmpty","Data","excelData","map","currencyData","quotes","USDAED","USDAFN","USDALL","USDAMD","USDANG","USDAOA","USDARS","USDAUD","USDAWG","USDAZN","USDBAM","USDBBD","USDBDT","USDBGN","USDBHD","USDBIF","USDBMD","USDBND","USDBOB","USDBRL","USDBSD","USDBTC","USDBTN","USDBWP","USDBYN","USDBYR","USDBZD","USDCAD","USDCDF","USDCHF","USDCLF","USDCLP","USDCNY","USDCOP","USDCRC","USDCUC","USDCUP","USDCVE","USDCZK","USDDJF","USDDKK","USDDOP","USDDZD","USDEGP","USDERN","USDETB","USDEUR","USDFJD","USDFKP","USDGBP","USDGEL","USDGGP","USDGHS","USDGIP","USDGMD","USDGNF","USDGTQ","USDGYD","USDHKD","USDHNL","USDHRK","USDHTG","USDHUF","USDIDR","USDILS","USDIMP","USDINR","USDIQD","USDIRR","USDISK","USDJEP","USDJMD","USDJOD","USDJPY","USDKES","USDKGS","USDKHR","USDKMF","USDKPW","USDKRW","USDKWD","USDKYD","USDKZT","USDLAK","USDLBP","USDLKR","USDLRD","USDLSL","USDLTL","USDLVL","USDLYD","USDMAD","USDMDL","USDMGA","USDMKD","USDMMK","USDMNT","USDMOP","USDMRO","USDMUR","USDMVR","USDMWK","USDMXN","USDMYR","USDMZN","USDNAD","USDNGN","USDNIO","USDNOK","USDNPR","USDNZD","USDOMR","USDPAB","USDPEN","USDPGK","USDPHP","USDPKR","USDPLN","USDPYG","USDQAR","USDRON","USDRSD","USDRUB","USDRWF","USDSAR","USDSBD","USDSCR","USDSDG","USDSEK","USDSGD","USDSHP","USDSLL","USDSOS","USDSRD","USDSTD","USDSVC","USDSYP","USDSZL","USDTHB","USDTJS","USDTMT","USDTND","USDTOP","USDTRY","USDTTD","USDTWD","USDTZS","USDUAH","USDUGX","USDUSD","USDUYU","USDUZS","USDVEF","USDVND","USDVUV","USDWST","USDXAF","USDXAG","USDXAU","USDXCD","USDXDR","USDXOF","USDXPF","USDYER","USDZAR","USDZMK","USDZMW","USDZWL","App","useState","excelFile","setExcelFile","excelFileError","setExcelFileError","setExcelData","fileType","setRates","setBase","useEffect","axios","get","then","response","data","updatedRates","newCurrency","Object","keys","autoComplete","onSubmit","e","preventDefault","workbook","XLSX","type","worksheetName","SheetNames","worksheet","Sheets","sheet_to_json","onChange","selectedFile","target","files","includes","reader","FileReader","readAsArrayBuffer","onload","result","console","log","required","style","marginTop","value","currency","id","scope","table","filename","sheet","buttonText","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b8df04a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const IndividualData = ({\n  individualExcelData,\n  rates,\n\n  base,\n}) => {\n  function noData(x) {\n    if (x === null || x === \"\") {\n      return \"\";\n    }\n    return x;\n  }\n\n  const currentCurrency = noData(individualExcelData?.Currency);\n\n  const val = \"USD\" + currentCurrency;\n\n  const price = (individualExcelData.Amount * rates[base]) / rates[val];\n  const convertedPrice = price.toFixed(2);\n\n  function isEmpty(x) {\n    if (isNaN(x)) {\n      return;\n    }\n    return x;\n  }\n\n  const baseData = base ? base.slice(3, 6) : \"\";\n\n  const convertTo = (baseData) => {\n    if (noData(currentCurrency)) {\n      return baseData;\n    }\n    return \"\";\n  };\n\n  return (\n    <>\n      <th>{noData(individualExcelData.Name)}</th>\n      <th className=\"convertTo\">{noData(currentCurrency)}</th>\n      <th className=\"convertTo\">{noData(individualExcelData.Amount)}</th>\n      <th className=\"convertTo\">\n        {individualExcelData[\"Transaction Date\"] ? (\n          <>\n            {new Date(\n              [individualExcelData[\"Transaction Date\"] - 25569] * 86400 * 1000\n            ).toDateString()}\n          </>\n        ) : (\n          \"\"\n        )}\n      </th>\n\n      <th className=\"convertTo\">{convertTo(baseData)}</th>\n      <th className=\"convertTo\">{isEmpty(convertedPrice)}</th>\n    </>\n  );\n};\n","import React from \"react\";\nimport { IndividualData } from \"./IndividualData\";\n\nexport const Data = ({ excelData, rates, base }) => {\n  return excelData.map((individualExcelData) => (\n    <tr key={individualExcelData.Name}>\n      <IndividualData\n        individualExcelData={individualExcelData}\n        rates={rates}\n        base={base}\n      />\n    </tr>\n  ));\n};\n","export const currencyData = [\r\n  {\r\n    quotes: {\r\n      USDAED: 3.673042,\r\n      USDAFN: 88.000368,\r\n      USDALL: 115.850403,\r\n      USDAMD: 455.940403,\r\n      USDANG: 1.800989,\r\n      USDAOA: 409.200804,\r\n      USDARS: 117.425046,\r\n      USDAUD: 1.440922,\r\n      USDAWG: 1.8005,\r\n      USDAZN: 1.70397,\r\n      USDBAM: 1.881402,\r\n      USDBBD: 2.017768,\r\n      USDBDT: 86.66657,\r\n      USDBGN: 1.880645,\r\n      USDBHD: 0.376933,\r\n      USDBIF: 2028.5,\r\n      USDBMD: 1,\r\n      USDBND: 1.394868,\r\n      USDBOB: 6.86018,\r\n      USDBRL: 5.059804,\r\n      USDBSD: 0.999269,\r\n      USDBTC: 3.4038007e-5,\r\n      USDBTN: 77.281066,\r\n      USDBWP: 12.24626,\r\n      USDBYN: 3.371138,\r\n      USDBYR: 19600,\r\n      USDBZD: 2.014218,\r\n      USDCAD: 1.29054,\r\n      USDCDF: 2034.000362,\r\n      USDCHF: 1.001631,\r\n      USDCLF: 0.031182,\r\n      USDCLP: 860.403912,\r\n      USDCNY: 6.789041,\r\n      USDCOP: 4109.17,\r\n      USDCRC: 669.129247,\r\n      USDCUC: 1,\r\n      USDCUP: 26.5,\r\n      USDCVE: 106.303897,\r\n      USDCZK: 23.787204,\r\n      USDDJF: 177.720394,\r\n      USDDKK: 7.14847,\r\n      USDDOP: 55.150393,\r\n      USDDZD: 146.39804,\r\n      USDEGP: 18.314607,\r\n      USDERN: 15.000001,\r\n      USDETB: 51.503876,\r\n      USDEUR: 0.96055,\r\n      USDFJD: 2.22504,\r\n      USDFKP: 0.818331,\r\n      USDGBP: 0.815328,\r\n      USDGEL: 3.020391,\r\n      USDGGP: 0.818331,\r\n      USDGHS: 7.52504,\r\n      USDGIP: 0.818331,\r\n      USDGMD: 53.703853,\r\n      USDGNF: 8795.000355,\r\n      USDGTQ: 7.664493,\r\n      USDGYD: 209.109711,\r\n      USDHKD: 7.849615,\r\n      USDHNL: 24.490389,\r\n      USDHRK: 7.228104,\r\n      USDHTG: 110.920967,\r\n      USDHUF: 370.54804,\r\n      USDIDR: 14665.95,\r\n      USDILS: 3.407604,\r\n      USDIMP: 0.818331,\r\n      USDINR: 77.486504,\r\n      USDIQD: 1460,\r\n      USDIRR: 42300.000352,\r\n      USDISK: 133.980386,\r\n      USDJEP: 0.818331,\r\n      USDJMD: 155.160406,\r\n      USDJOD: 0.70904,\r\n      USDJPY: 129.26504,\r\n      USDKES: 116.203804,\r\n      USDKGS: 83.036604,\r\n      USDKHR: 4062.000351,\r\n      USDKMF: 472.850384,\r\n      USDKPW: 900.000222,\r\n      USDKRW: 1278.565039,\r\n      USDKWD: 0.30705,\r\n      USDKYD: 0.832764,\r\n      USDKZT: 431.744505,\r\n      USDLAK: 13226.000349,\r\n      USDLBP: 1514.750915,\r\n      USDLKR: 359.757675,\r\n      USDLRD: 151.503775,\r\n      USDLSL: 16.170382,\r\n      USDLTL: 2.95274,\r\n      USDLVL: 0.60489,\r\n      USDLYD: 4.815039,\r\n      USDMAD: 10.13375,\r\n      USDMDL: 18.986398,\r\n      USDMGA: 3994.000347,\r\n      USDMKD: 59.270268,\r\n      USDMMK: 1849.835057,\r\n      USDMNT: 3075.770799,\r\n      USDMOP: 8.078096,\r\n      USDMRO: 356.999828,\r\n      USDMUR: 43.003937,\r\n      USDMVR: 15.460378,\r\n      USDMWK: 815.000345,\r\n      USDMXN: 20.106304,\r\n      USDMYR: 4.398039,\r\n      USDMZN: 63.830377,\r\n      USDNAD: 16.170377,\r\n      USDNGN: 415.260377,\r\n      USDNIO: 35.770377,\r\n      USDNOK: 9.70953,\r\n      USDNPR: 123.650933,\r\n      USDNZD: 1.599199,\r\n      USDOMR: 0.384897,\r\n      USDPAB: 0.999269,\r\n      USDPEN: 3.777504,\r\n      USDPGK: 3.515039,\r\n      USDPHP: 52.380375,\r\n      USDPKR: 192.950375,\r\n      USDPLN: 4.498575,\r\n      USDPYG: 6874.101152,\r\n      USDQAR: 3.64125,\r\n      USDRON: 4.749604,\r\n      USDRSD: 112.875038,\r\n      USDRUB: 65.50369,\r\n      USDRWF: 1021,\r\n      USDSAR: 3.750859,\r\n      USDSBD: 8.126811,\r\n      USDSCR: 13.363318,\r\n      USDSDG: 453.503678,\r\n      USDSEK: 10.033215,\r\n      USDSGD: 1.39119,\r\n      USDSHP: 1.377404,\r\n      USDSLL: 12700.000339,\r\n      USDSOS: 584.000338,\r\n      USDSRD: 21.012504,\r\n      USDSTD: 20697.981008,\r\n      USDSVC: 8.744084,\r\n      USDSYP: 2512.450518,\r\n      USDSZL: 16.17037,\r\n      USDTHB: 34.69037,\r\n      USDTJS: 12.491174,\r\n      USDTMT: 3.5,\r\n      USDTND: 3.09525,\r\n      USDTOP: 2.347804,\r\n      USDTRY: 15.479904,\r\n      USDTTD: 6.782839,\r\n      USDTWD: 29.795504,\r\n      USDTZS: 2325.000336,\r\n      USDUAH: 29.502578,\r\n      USDUGX: 3603.447612,\r\n      USDUSD: 1,\r\n      USDUYU: 41.536279,\r\n      USDUZS: 11165.000335,\r\n      USDVEF: 213830222338.07285,\r\n      USDVND: 23087.5,\r\n      USDVUV: 114.265663,\r\n      USDWST: 2.579343,\r\n      USDXAF: 631.016089,\r\n      USDXAG: 0.047357,\r\n      USDXAU: 0.000552,\r\n      USDXCD: 2.70255,\r\n      USDXDR: 0.749669,\r\n      USDXOF: 628.000332,\r\n      USDXPF: 115.150364,\r\n      USDYER: 250.250364,\r\n      USDZAR: 16.16216,\r\n      USDZMK: 9001.203593,\r\n      USDZMW: 16.937839,\r\n      USDZWL: 321.999592,\r\n    },\r\n  },\r\n];\r\n","import React, { useState, useEffect } from \"react\";\nimport { Data } from \"./Components/Data\";\nimport * as XLSX from \"xlsx\";\nimport axios from \"axios\";\nimport { currencyData } from \"./data\";\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\n\nfunction App() {\n  // on change states\n  const [excelFile, setExcelFile] = useState(null);\n  const [excelFileError, setExcelFileError] = useState(null);\n\n  // submit\n  const [excelData, setExcelData] = useState(null);\n  // it will contain array of objects\n\n  // handle File\n  const fileType = [\n    \"application/vnd.ms-excel\",\n    \"application/xlsx\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n  ];\n  const handleFile = (e) => {\n    let selectedFile = e.target.files[0];\n    if (selectedFile) {\n      if (selectedFile && fileType.includes(selectedFile.type)) {\n        let reader = new FileReader();\n        reader.readAsArrayBuffer(selectedFile);\n        reader.onload = (e) => {\n          setExcelFileError(null);\n          setExcelFile(e.target.result);\n        };\n      } else {\n        setExcelFileError(\"Please select only excel file types\");\n        setExcelFile(null);\n      }\n    } else {\n      console.log(\"plz select your file\");\n    }\n  };\n\n  // submit function\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (excelFile !== null) {\n      const workbook = XLSX.read(excelFile, { type: \"buffer\" });\n      const worksheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[worksheetName];\n      const data = XLSX.utils.sheet_to_json(worksheet);\n      setExcelData(data);\n    } else {\n      setExcelData(null);\n    }\n  };\n\n  // All about current and updated currency\n  const [rates, setRates] = useState([]);\n  const [base, setBase] = useState();\n\n  useEffect(() => {\n    axios\n      .get(\n        \"https://api.apilayer.com/currency_data/live?base=USD&symbols=INR,GBP&apikey=2dwOEjeqYFPaZxM2R1BaHVNscpCOoENx\"\n      )\n      .then((response) => {\n        setRates(response?.data?.quotes);\n      });\n  }, []);\n\n  const updatedRates = rates ? currencyData[0]?.quotes : rates;\n\n  const newCurrency = Object.keys(updatedRates);\n  return (\n    <div className=\"container\">\n      {/* upload file section */}\n      <div className=\"form\">\n        <form className=\"form-group\" autoComplete=\"off\" onSubmit={handleSubmit}>\n          <label>\n            <h5>Upload Excel file</h5>\n          </label>\n          <br></br>\n          <input\n            type=\"file\"\n            className=\"form-control\"\n            onChange={handleFile}\n            required\n          ></input>\n          {excelFileError && (\n            <div className=\"text-danger\" style={{ marginTop: 5 + \"px\" }}>\n              {excelFileError}\n            </div>\n          )}\n          <button\n            type=\"submit\"\n            className=\"btn btn-success\"\n            style={{ marginTop: 5 + \"px\" }}\n          >\n            Submit\n          </button>\n        </form>\n      </div>\n\n      <br></br>\n      <hr></hr>\n\n      {/* view file section */}\n\n      <div className=\"viewer\">\n        {excelData === null && <>No file selected</>}\n        {excelData !== null && (\n          <div className=\"table-responsive\">\n            <div className=\"convert-btn\">\n              <h5>Convert Excel to</h5>\n              <select\n                onChange={(e) => {\n                  const value = e.target.value;\n                  setBase(value);\n                }}\n              >\n                {newCurrency.map((currency) => (\n                  <option value={currency}>{currency.slice(3, 6)}</option>\n                ))}\n              </select>\n            </div>\n            <table className=\"table\" id=\"table-to-excel\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Name</th>\n                  <th className=\"convertTo\" scope=\"col\">\n                    Currency\n                  </th>\n                  <th className=\"convertTo\" scope=\"col\">\n                    Amount\n                  </th>\n                  <th className=\"convertTo\" scope=\"col\">\n                    Transaction Date\n                  </th>\n                  <th className=\"convertTo\" scope=\"col\">\n                    Convert To\n                    {/* <select\n                      scope=\"col\"\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setBase(value);\n                      }}\n                    >\n                      {newCurrency.map((currency) => (\n                        <option value={currency}>{currency.slice(3, 6)}</option>\n                      ))}\n\n                      {/* <select\n                        className=\"custom-select\"\n                        value={base}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          setBase(value);\n                        }}\n                      ></select> */}\n                    {/* </select> */}\n                  </th>\n                  <th className=\"convertTo\" scope=\"col\">\n                    Converted Amout\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <Data excelData={excelData} rates={updatedRates} base={base} />\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n      <ReactHTMLTableToExcel\n        id=\"test-table-xls-button\"\n        className=\"download-table-xls-button btn btn-success mb-3\"\n        table=\"table-to-excel\"\n        filename=\"tablexls\"\n        sheet=\"tablexls\"\n        buttonText=\"Export Data to Excel Sheet\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}